@@ -304,18 +304,20 @@ static void queue_directory (char const
 static void sort_files (void);
 static void parse_ls_color (void);
 
 static int getenv_quoting_style (void);
 
 static size_t quote_name_width (char const *name,
                                 struct quoting_options const *options,
                                 int needs_general_quoting);
 
+static char *pretty (char *buffer, void *size, bool bFloat);
+
 /* Initial size of hash table.
    Most hierarchies are likely to be shallower than this.  */
 enum { INITIAL_TABLE_SIZE = 30 };
 
 /* The set of 'active' directories, from the current command-line argument
    to the level in the hierarchy at which files are being listed.
    A directory is represented by its device and inode numbers (struct dev_ino).
    A directory is added to this set when ls begins listing it or its
    entries, and it is removed from the set just after ls has finished
@@ -504,18 +506,22 @@ static bool print_owner = true;
 
 /* True means to display author information.  */
 
 static bool print_author;
 
 /* True means to display group information.  -G and -o turn this off.  */
 
 static bool print_group = true;
 
+/* True means sum up files/links/dirs/others.  -j|-J  */
+
+static bool print_journal = false;
+
 /* True means print the user and group id's as numbers rather
    than as names.  -n  */
 
 static bool numeric_ids;
 
 /* True means mention the size in blocks of each file.  -s  */
 
 static bool print_block_size;
 
@@ -869,18 +875,20 @@ static struct option const long_options[
   {"ignore-backups", no_argument, NULL, 'B'},
   {"classify", optional_argument, NULL, 'F'},
   {"file-type", no_argument, NULL, FILE_TYPE_INDICATOR_OPTION},
   {"si", no_argument, NULL, SI_OPTION},
   {"dereference-command-line", no_argument, NULL, 'H'},
   {"dereference-command-line-symlink-to-dir", no_argument, NULL,
    DEREFERENCE_COMMAND_LINE_SYMLINK_TO_DIR_OPTION},
   {"hide", required_argument, NULL, HIDE_OPTION},
   {"ignore", required_argument, NULL, 'I'},
+  {"journal", optional_argument, NULL, 'j'},
+  {"no-journal", no_argument, NULL, 'J'},
   {"indicator-style", required_argument, NULL, INDICATOR_STYLE_OPTION},
   {"dereference", no_argument, NULL, 'L'},
   {"literal", no_argument, NULL, 'N'},
   {"quote-name", no_argument, NULL, 'Q'},
   {"quoting-style", required_argument, NULL, QUOTING_STYLE_OPTION},
   {"recursive", no_argument, NULL, 'R'},
   {"format", required_argument, NULL, FORMAT_OPTION},
   {"show-control-chars", no_argument, NULL, SHOW_CONTROL_CHARS_OPTION},
   {"sort", required_argument, NULL, SORT_OPTION},
@@ -1635,18 +1643,51 @@ signal_init (void)
   signal_setup (true);
 }
 
 static void
 signal_restore (void)
 {
   signal_setup (false);
 }
 
+// my global counter vars
+static int    iFiles,    iLinks,    iDirs,    iOthers,
+           iSumFiles, iSumLinks, iSumDirs, iSumOthers;
+static double    dSizeAll,    dSizeFiles,
+              dSumSizeAll, dSumSizeFiles;
+static char paBuf[6][50], cDelim;
+
+// my pretty printer
+char *
+pretty (char *buffer, void *size, bool bFloat)
+{
+  char aBuf[50];
+  char *pa = aBuf, *pb = buffer;
+
+  if (bFloat)
+    sprintf (aBuf, "%.f", *(double*) size);
+  else
+    sprintf (aBuf, "%d", *(int*) size);
+
+  int iLen = strlen (aBuf);
+
+  while (iLen) {
+    *pb++ = *pa++;
+
+    if (--iLen && ! (iLen % 3))
+      if (cDelim)
+        *pb++ = cDelim;
+  }
+  *pb = '\0';
+
+  return buffer;
+}
+
 int
 main (int argc, char **argv)
 {
   int i;
   struct pending *thispend;
   int n_files;
 
   initialize_main (&argc, &argv);
   set_program_name (argv[0]);
@@ -1714,19 +1755,20 @@ main (int argc, char **argv)
 
       obstack_init (&dev_ino_obstack);
     }
 
   localtz = tzalloc (getenv ("TZ"));
 
   format_needs_stat = sort_type == sort_time || sort_type == sort_size
     || format == long_format
     || print_scontext
-    || print_block_size;
+    || print_block_size
+    || print_journal;
   format_needs_type = (! format_needs_stat
                        && (recursive
                            || print_with_color
                            || indicator_style != none
                            || directories_first));
 
   if (dired)
     {
       obstack_init (&dired_obstack);
@@ -1810,18 +1852,27 @@ main (int argc, char **argv)
         }
 
       print_dir (thispend->name, thispend->realname,
                  thispend->command_line_arg);
 
       free_pending_ent (thispend);
       print_dir_name = true;
     }
 
+  if (print_journal && recursive)
+    printf ("  %s File%s  %s Link%s  %s Dir%s  %s Other%s  #  %s (%s) Byte%s\n",
+            pretty (paBuf[0], &iSumFiles,    false), iSumFiles    == 1 ? "" : "s",
+            pretty (paBuf[1], &iSumLinks,    false), iSumLinks    == 1 ? "" : "s",
+            pretty (paBuf[2], &iSumDirs,     false), iSumDirs     == 1 ? "" : "s",
+            pretty (paBuf[3], &iSumOthers,   false), iSumOthers   == 1 ? "" : "s",
+            pretty (paBuf[4], &dSumSizeAll,   true),
+            pretty (paBuf[5], &dSumSizeFiles, true), dSumSizeAll  == 1 ? "" : "s");
+
   if (print_with_color && used_color)
     {
       int j;
 
       /* Skip the restore when it would be a no-op, i.e.,
          when left is "\033[" and right is "m".  */
       if (!(color_indicator[C_LEFT].len == 2
             && memcmp (color_indicator[C_LEFT].string, "\033[", 2) == 0
             && color_indicator[C_RIGHT].len == 1
@@ -1911,19 +1962,19 @@ decode_switches (int argc, char **argv)
   int quoting_style_opt = -1;
   int sort_opt = -1;
   ptrdiff_t tabsize_opt = -1;
   ptrdiff_t width_opt = -1;
 
   while (true)
     {
       int oi = -1;
       int c = getopt_long (argc, argv,
-                           "abcdfghiklmnopqrstuvw:xABCDFGHI:LNQRST:UXZ1",
+                           "abcdfghij::klmnopqrstuvw:xABCDFGHI:JLNQRST:UXZ1",
                            long_options, &oi);
       if (c == -1)
         break;
 
       switch (c)
         {
         case 'a':
           ignore_mode = IGNORE_MINIMAL;
           break;
@@ -1965,18 +2016,23 @@ decode_switches (int argc, char **argv)
           file_human_output_opts = human_output_opts =
             human_autoscale | human_SI | human_base_1024;
           file_output_block_size = output_block_size = 1;
           break;
 
         case 'i':
           print_inode = true;
           break;
 
+        case 'j':
+          print_journal = true;
+          cDelim = optarg ? *optarg : '\0';
+          break;
+
         case 'k':
           kibibytes_specified = true;
           break;
 
         case 'l':
           format_opt = long_format;
           break;
 
         case 'm':
@@ -2074,18 +2130,22 @@ decode_switches (int argc, char **argv)
 
         case DEREFERENCE_COMMAND_LINE_SYMLINK_TO_DIR_OPTION:
           dereference = DEREF_COMMAND_LINE_SYMLINK_TO_DIR;
           break;
 
         case 'I':
           add_ignore_pattern (optarg);
           break;
 
+        case 'J':
+          print_journal = false;
+          break;
+
         case 'L':
           dereference = DEREF_ALWAYS;
           break;
 
         case 'N':
           quoting_style_opt = literal_quoting_style;
           break;
 
         case 'Q':
@@ -3079,19 +3139,20 @@ print_dir (char const *name, char const
   /* Sort the directory contents.  */
   sort_files ();
 
   /* If any member files are subdirectories, perhaps they should have their
      contents listed rather than being mentioned here as files.  */
 
   if (recursive)
     extract_dirs_from_files (name, false);
 
-  if (format == long_format || print_block_size)
+  /* Omit the "total" line for long format. Leads to some failing tests!  */
+  if (/* format == long_format || */print_block_size)
     {
       char buf[LONGEST_HUMAN_READABLE + 3];
       char *p = human_readable (total_blocks, buf + 1, human_output_opts,
                                 ST_NBLOCKSIZE, output_block_size);
       char *pend = p + strlen (p);
       *--p = ' ';
       *pend++ = eolbyte;
       dired_indent ();
       dired_outstring (_("total"));
@@ -4112,18 +4173,22 @@ sort_files (void)
                         [directories_first]);
 }
 
 /* List all the files now in the table.  */
 
 static void
 print_current_files (void)
 {
   size_t i;
+  char aBuf[150];
+
+  iFiles = iLinks = iDirs = iOthers = 0;
+  dSizeAll = dSizeFiles = 0;
 
   switch (format)
     {
     case one_per_line:
       for (i = 0; i < cwd_n_used; i++)
         {
           print_file_name_and_frills (sorted_file[i], 0);
           putchar (eolbyte);
         }
@@ -4150,18 +4215,38 @@ print_current_files (void)
     case long_format:
       for (i = 0; i < cwd_n_used; i++)
         {
           set_normal_color ();
           print_long_format (sorted_file[i]);
           dired_outbyte (eolbyte);
         }
       break;
     }
+
+  if (print_journal)
+    {
+      sprintf (aBuf, "  %s File%s  %s Link%s  %s Dir%s  %s Other%s  -  %s (%s) Byte%s\n",
+               pretty (paBuf[0], &iFiles,    false), iFiles   == 1 ? "" : "s",
+               pretty (paBuf[1], &iLinks,    false), iLinks   == 1 ? "" : "s",
+               pretty (paBuf[2], &iDirs,     false), iDirs    == 1 ? "" : "s",
+               pretty (paBuf[3], &iOthers,   false), iOthers  == 1 ? "" : "s",
+               pretty (paBuf[4], &dSizeAll,   true),
+               pretty (paBuf[5], &dSizeFiles, true), dSizeAll == 1 ? "" : "s");
+
+      dired_outstring (aBuf);
+
+      iSumFiles     += iFiles;
+      iSumLinks     += iLinks;
+      iSumDirs      += iDirs;
+      iSumOthers    += iOthers;
+      dSumSizeAll   += dSizeAll;
+      dSumSizeFiles += dSizeFiles;
+    }
 }
 
 /* Replace the first %b with precomputed aligned month names.
    Note on glibc-2.7 at least, this speeds up the whole 'ls -lU'
    process by around 17%, compared to letting strftime() handle the %b.  */
 
 static size_t
 align_nstrftime (char *buf, size_t size, bool recent, struct tm const *tm,
                  timezone_t tz, int ns)
@@ -4832,18 +4917,43 @@ print_name_with_quoting (const struct fi
          because we only output the clear to EOL sequence if the name
          _might_ wrap to the next line.  This may output a sequence
          unnecessarily in multi-byte locales for example,
          but in that case it's inconsequential to the output.  */
       if (line_length
           && (start_col / line_length != (start_col + len - 1) / line_length))
         put_indicator (&color_indicator[C_CLR_TO_EOL]);
     }
 
+  if (print_journal && !symlink_target)
+    {
+      if (f->stat_ok)
+        {
+          if (S_ISREG (f->stat.st_mode))
+            {
+              ++iFiles;
+              dSizeFiles += f->stat.st_size;
+            }
+          else if (S_ISLNK (f->stat.st_mode))
+            ++iLinks;
+          else if (S_ISDIR (f->stat.st_mode))
+            ++iDirs;
+          else
+            {
+              ++iOthers;
+            }
+          dSizeAll += f->stat.st_size;
+        }
+      else
+        {
+          ++iOthers;
+        }
+    }
+
   return len;
 }
 
 static void
 prep_non_filename_text (void)
 {
   if (color_indicator[C_END].string != NULL)
     put_indicator (&color_indicator[C_END]);
   else
@@ -5490,18 +5600,23 @@ Sort entries alphabetically if none of -
                              file-type (--file-type), classify (-F)\n\
 \n\
 "), stdout);
       fputs (_("\
   -i, --inode                print the index number of each file\n\
   -I, --ignore=PATTERN       do not list implied entries matching shell PATTERN\
 \n\
 "), stdout);
       fputs (_("\
+  -j, --journal[=SEP]        sum up files/links/dirs [with thousands separator]\
+\n\
+  -J, --no-journal           omit the journal (default)\n\
+"), stdout);
+      fputs (_("\
   -k, --kibibytes            default to 1024-byte blocks for file system usage;\
 \n\
                              used only with -s and per directory totals\n\
 \n\
 "), stdout);
       fputs (_("\
   -l                         use a long listing format\n\
 "), stdout);
       fputs (_("\
