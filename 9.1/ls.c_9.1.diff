@@ -37,6 +37,7 @@
 
 #include <config.h>
 #include <sys/types.h>
+#include <sys/xattr.h>
 
 #include <termios.h>
 #if HAVE_STROPTS_H
@@ -216,6 +217,9 @@
     /* security context.  */
     char *scontext;
 
+    /* user extended attributes */
+    bool xattr_user;
+
     bool stat_ok;
 
     /* For symbolic link and color printing, true if linked-to file
@@ -310,6 +314,8 @@
                                 struct quoting_options const *options,
                                 int needs_general_quoting);
 
+static char *pretty (char *buffer, void *size, bool bFloat);
+
 /* Initial size of hash table.
    Most hierarchies are likely to be shallower than this.  */
 enum { INITIAL_TABLE_SIZE = 30 };
@@ -510,6 +516,10 @@
 
 static bool print_group = true;
 
+/* True means sum up files/links/dirs/others.  -j|-J  */
+
+static bool print_journal = false;
+
 /* True means print the user and group id's as numbers rather
    than as names.  -n  */
 
@@ -875,6 +885,8 @@
    DEREFERENCE_COMMAND_LINE_SYMLINK_TO_DIR_OPTION},
   {"hide", required_argument, NULL, HIDE_OPTION},
   {"ignore", required_argument, NULL, 'I'},
+  {"journal", optional_argument, NULL, 'j'},
+  {"no-journal", no_argument, NULL, 'J'},
   {"indicator-style", required_argument, NULL, INDICATOR_STYLE_OPTION},
   {"dereference", no_argument, NULL, 'L'},
   {"literal", no_argument, NULL, 'N'},
@@ -1641,6 +1653,39 @@
   signal_setup (false);
 }
 
+// my global counter vars
+static int    iFiles,    iLinks,    iDirs,    iOthers,
+           iSumFiles, iSumLinks, iSumDirs, iSumOthers;
+static double    dSizeAll,    dSizeFiles,
+              dSumSizeAll, dSumSizeFiles;
+static char paBuf[6][50], cDelim;
+
+// my pretty printer
+char *
+pretty (char *buffer, void *size, bool bFloat)
+{
+  char aBuf[50];
+  char *pa = aBuf, *pb = buffer;
+
+  if (bFloat)
+    sprintf (aBuf, "%.f", *(double*) size);
+  else
+    sprintf (aBuf, "%d", *(int*) size);
+
+  int iLen = strlen (aBuf);
+
+  while (iLen) {
+    *pb++ = *pa++;
+
+    if (--iLen && ! (iLen % 3))
+      if (cDelim)
+        *pb++ = cDelim;
+  }
+  *pb = '\0';
+
+  return buffer;
+}
+
 int
 main (int argc, char **argv)
 {
@@ -1720,7 +1765,8 @@
   format_needs_stat = sort_type == sort_time || sort_type == sort_size
     || format == long_format
     || print_scontext
-    || print_block_size;
+    || print_block_size
+    || print_journal;
   format_needs_type = (! format_needs_stat
                        && (recursive
                            || print_with_color
@@ -1816,6 +1862,15 @@
       print_dir_name = true;
     }
 
+  if (print_journal && recursive)
+    printf ("  %s File%s  %s Link%s  %s Dir%s  %s Other%s  #  %s (%s) Byte%s\n",
+            pretty (paBuf[0], &iSumFiles,    false), iSumFiles    == 1 ? "" : "s",
+            pretty (paBuf[1], &iSumLinks,    false), iSumLinks    == 1 ? "" : "s",
+            pretty (paBuf[2], &iSumDirs,     false), iSumDirs     == 1 ? "" : "s",
+            pretty (paBuf[3], &iSumOthers,   false), iSumOthers   == 1 ? "" : "s",
+            pretty (paBuf[4], &dSumSizeAll,   true),
+            pretty (paBuf[5], &dSumSizeFiles, true), dSumSizeAll  == 1 ? "" : "s");
+
   if (print_with_color && used_color)
     {
       int j;
@@ -1917,7 +1972,7 @@
     {
       int oi = -1;
       int c = getopt_long (argc, argv,
-                           "abcdfghiklmnopqrstuvw:xABCDFGHI:LNQRST:UXZ1",
+                           "abcdfghij::klmnopqrstuvw:xABCDFGHI:JLNQRST:UXZ1",
                            long_options, &oi);
       if (c == -1)
         break;
@@ -1971,6 +2026,11 @@
           print_inode = true;
           break;
 
+        case 'j':
+          print_journal = true;
+          cDelim = optarg ? *optarg : '\0';
+          break;
+
         case 'k':
           kibibytes_specified = true;
           break;
@@ -2080,6 +2140,10 @@
           add_ignore_pattern (optarg);
           break;
 
+        case 'J':
+          print_journal = false;
+          break;
+
         case 'L':
           dereference = DEREF_ALWAYS;
           break;
@@ -3085,7 +3149,8 @@
   if (recursive)
     extract_dirs_from_files (name, false);
 
-  if (format == long_format || print_block_size)
+  /* Omit the "total" line for long format. Leads to some failing tests!  */
+  if (/* format == long_format || */print_block_size)
     {
       char buf[LONGEST_HUMAN_READABLE + 3];
       char *p = human_readable (total_blocks, buf + 1, human_output_opts,
@@ -3320,6 +3385,8 @@
   return *name != *test || strlen (name) != len;
 }
 
+static char xattr_buf[65536];  // VFS imposed max size
+
 /* Add a file to the current table of files.
    Verify that the file exists, and print an error message if it does not.
    Return the number of blocks that the file occupies.  */
@@ -3511,12 +3578,36 @@
               have_acl = (0 < n);
             }
 
+          attr_len = listxattr(full_name, NULL, 0);
+          if (attr_len > 0)
+            {
+              attr_len = listxattr(full_name, xattr_buf, 65536);
+
+              if (attr_len > 0)
+                {
+                  char *pBuf = xattr_buf;
+
+                  while (attr_len > 0)
+                    {
+                      if (! strncmp(pBuf, "user.", 5))
+                        {
+                          f->xattr_user = true;
+                          break;
+                        }
+
+                      int l = strlen(pBuf) + 1;
+                      pBuf += l;
+                      attr_len -= l;
+                    }
+                }
+            }
+
           f->acl_type = (!have_scontext && !have_acl
                          ? ACL_T_NONE
                          : (have_scontext && !have_acl
                             ? ACL_T_LSM_CONTEXT_ONLY
                             : ACL_T_YES));
-          any_has_acl |= f->acl_type != ACL_T_NONE;
+          any_has_acl |= f->acl_type != ACL_T_NONE || f->xattr_user;
 
           if (err)
             error (0, errno, "%s", quotef (full_name));
@@ -4118,6 +4209,10 @@
 print_current_files (void)
 {
   size_t i;
+  char aBuf[150];
+
+  iFiles = iLinks = iDirs = iOthers = 0;
+  dSizeAll = dSizeFiles = 0;
 
   switch (format)
     {
@@ -4156,6 +4251,26 @@
         }
       break;
     }
+
+  if (print_journal)
+    {
+      sprintf (aBuf, "  %s File%s  %s Link%s  %s Dir%s  %s Other%s  -  %s (%s) Byte%s\n",
+               pretty (paBuf[0], &iFiles,    false), iFiles   == 1 ? "" : "s",
+               pretty (paBuf[1], &iLinks,    false), iLinks   == 1 ? "" : "s",
+               pretty (paBuf[2], &iDirs,     false), iDirs    == 1 ? "" : "s",
+               pretty (paBuf[3], &iOthers,   false), iOthers  == 1 ? "" : "s",
+               pretty (paBuf[4], &dSizeAll,   true),
+               pretty (paBuf[5], &dSizeFiles, true), dSizeAll == 1 ? "" : "s");
+
+      dired_outstring (aBuf);
+
+      iSumFiles     += iFiles;
+      iSumLinks     += iLinks;
+      iSumDirs      += iDirs;
+      iSumOthers    += iOthers;
+      dSumSizeAll   += dSizeAll;
+      dSumSizeFiles += dSizeFiles;
+    }
 }
 
 /* Replace the first %b with precomputed aligned month names.
@@ -4326,6 +4441,9 @@
   else if (f->acl_type == ACL_T_YES)
     modebuf[10] = '+';
 
+  if (f->xattr_user)
+    modebuf[10] = '!';
+
   switch (time_type)
     {
     case time_ctime:
@@ -4838,6 +4956,31 @@
         put_indicator (&color_indicator[C_CLR_TO_EOL]);
     }
 
+  if (print_journal && !symlink_target)
+    {
+      if (f->stat_ok)
+        {
+          if (S_ISREG (f->stat.st_mode))
+            {
+              ++iFiles;
+              dSizeFiles += f->stat.st_size;
+            }
+          else if (S_ISLNK (f->stat.st_mode))
+            ++iLinks;
+          else if (S_ISDIR (f->stat.st_mode))
+            ++iDirs;
+          else
+            {
+              ++iOthers;
+            }
+          dSizeAll += f->stat.st_size;
+        }
+      else
+        {
+          ++iOthers;
+        }
+    }
+
   return len;
 }
 
@@ -5496,6 +5639,11 @@
 \n\
 "), stdout);
       fputs (_("\
+  -j, --journal[=SEP]        sum up files/links/dirs [with thousands separator]\
+\n\
+  -J, --no-journal           omit the journal (default)\n\
+"), stdout);
+      fputs (_("\
   -k, --kibibytes            default to 1024-byte blocks for file system usage;\
 \n\
                              used only with -s and per directory totals\n\
